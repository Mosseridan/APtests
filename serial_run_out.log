n is set to 1000
each matrix takes 4008000 Bytes
total usage of matrices a,b,c and d is 16032000 Bytes

computing d = a*b with a serial calculating
finished computing d, in 6.140000 seconds

computing c = a*b with test: mat_mul
finished test: mat_mul, in 6.080000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_function_calls
finished test: mat_mul_function_calls, in 8.620000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_function_calls2
finished test: mat_mul_function_calls2, in 10.780000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_function_calls3
finished test: mat_mul_function_calls3, in 8.790000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_function_calls4
finished test: mat_mul_function_calls4, in 6.820000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_loop_unroll
finished test: mat_mul_loop_unroll, in 5.070000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_loop_unroll2
finished test: mat_mul_loop_unroll2, in 4.050000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_loop_unroll3
finished test: mat_mul_loop_unroll3, in 3.820000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_arr_priv
finished test: mat_mul_arr_priv, in 6.440000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_arr_priv2
finished test: mat_mul_arr_priv2, in 5.480000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_pointer_alias
finished test: mat_mul_pointer_alias, in 6.410000 seconds
verifying that c == d

computing c = a*b with test: mat_mul_pointer_alias2
finished test: mat_mul_pointer_alias2, in 6.460000 seconds
verifying that c == d
